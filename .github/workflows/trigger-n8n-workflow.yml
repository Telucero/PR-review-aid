name: Trigger n8n Webhook with Complete PR Info

on:
  pull_request:
    types: [opened]

permissions:
  contents: write
  pull-requests: write

jobs:
  gather-and-send:
    runs-on: ubuntu-latest
    steps:

      # -----------------------
      # 1. Checkout repository
      # -----------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -----------------------
      # 2. Generate Run UUID
      # -----------------------
      - name: Generate Run UUID
        id: uuid
        run: echo "run_token=$(uuidgen)" >> $GITHUB_OUTPUT

      # -----------------------
      # 3. Pre-flight checks
      # -----------------------
      - name: Validate setup
        run: |
          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "❌ Missing GITHUB_TOKEN secret."
            exit 1
          fi

          if [[ -z "${{ github.event.pull_request.number }}" ]]; then
            echo "❌ No PR number found in event payload."
            exit 1
          fi

      # -----------------------
      # 4. Fetch PR metadata
      # -----------------------
      - name: Fetch PR metadata
        run: |
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} > pr.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------
      # 5. Fetch PR files (diffs/patches)
      # -----------------------
      - name: Fetch PR files
        run: |
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files > files.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------
      # 6. Fetch PR commits
      # -----------------------
      - name: Fetch PR commits
        run: |
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits > commits.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------
      # 7. Fetch PR diff and compress
      # -----------------------
      - name: Fetch PR diff and compress
        run: |
          curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3.diff" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
            > pr.diff

          gzip -c pr.diff > pr.diff.gz
          base64 -w 0 pr.diff.gz > diff.b64
          echo "::add-mask::$(cat diff.b64)"

          # Warn if diff is very large
          DIFF_SIZE=$(stat -c%s pr.diff.gz)
          MAX_SIZE=$((10*1024*1024)) # 10 MB limit
          if (( DIFF_SIZE > MAX_SIZE )); then
            echo "⚠️ Compressed diff size is $DIFF_SIZE bytes, may fail sending to n8n"
          fi

      # -----------------------
      # 8. Debug payload size
      # -----------------------
      - name: Debug payload size
        run: |
          echo "PR metadata size: $(stat -c%s pr.json) bytes"
          echo "Files metadata size: $(stat -c%s files.json) bytes"
          echo "Commits metadata size: $(stat -c%s commits.json) bytes"
          echo "Compressed diff size: $(stat -c%s pr.diff.gz) bytes"

      # -----------------------
      # 9. Combine and send payload to n8n
      # -----------------------
      - name: Combine and send to n8n webhook
        run: |
          set -e

          jq -n \
            --slurpfile pr pr.json \
            --slurpfile files files.json \
            --slurpfile commits commits.json \
            --arg diff_base64 "$(cat diff.b64)" \
            --arg token "${{ steps.uuid.outputs.run_token }}" \
            '{
              pr: $pr[0],
              files: $files[0],
              commits: $commits[0],
              diff_base64: $diff_base64,
              token: $token
            }' > payload.json

          # Check payload size before sending
          PAYLOAD_SIZE=$(stat -c%s payload.json)
          MAX_BYTES=$((10*1024*1024))
          if (( PAYLOAD_SIZE > MAX_BYTES )); then
            echo "❌ Payload too large ($PAYLOAD_SIZE bytes). Aborting send."
            exit 1
          fi

          # Send payload
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            --data-binary @payload.json \
            "${{ secrets.N8N_WEBHOOK_URL }}")

          HTTP_BODY=$(echo "$RESPONSE" | sed '$d')
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "n8n responded with status: $HTTP_STATUS"
          echo "$HTTP_BODY" > response_body.json

          # Validate response token and status
          STATUS=$(jq -r ".status" response_body.json)
          MATCHED=$(jq -r ".token" response_body.json)
          if [ "$MATCHED" != "${{ steps.uuid.outputs.run_token }}" ] || [ "$STATUS" != "completed" ]; then
            echo "❌ n8n workflow failed or token mismatch"
            exit 1
          fi

          if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
            echo "❌ n8n workflow failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

      # -----------------------
      # 10. Parse verification claims and post PR comments
      # -----------------------
      - name: Parse verification claims into structured schema
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE_BODY=$(cat response_body.json)

          PR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r ".pr_number")
          COMMENTS_JSON=$(echo "$RESPONSE_BODY" | jq -r ".comment")

          if [ -z "$COMMENTS_JSON" ] || [ "$COMMENTS_JSON" == "null" ]; then
            echo "No comments to post."
            exit 0
          fi

          echo "$COMMENTS_JSON" | jq -c '.' | jq -c '.[]' | while read -r item; do
            FORMATTED_REVIEW=$(echo "$item" | jq -r '.formattedReview')
            if [ -n "$FORMATTED_REVIEW" ] && [ "$FORMATTED_REVIEW" != "null" ]; then
              echo "Posting feedback to PR #$PR_NUMBER..."
              gh pr comment "$PR_NUMBER" --body "$FORMATTED_REVIEW"
            fi
          done

