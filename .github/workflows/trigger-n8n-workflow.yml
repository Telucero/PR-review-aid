name: Trigger N8N Workflow

on:
  # Trigger on various events - customize as needed
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, closed, reopened]
  issues:
    types: [opened, closed, labeled]
  release:
    types: [published]
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      message:
        description: 'Custom message for the workflow'
        required: false
        type: string

env:
  # N8N webhook URL - use secret if available, fallback for testing
  N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL || 'https://n8n.papermoon.io/webhook-test/8bdbd1e3-f7bf-4bec-ae9d-9535ef6158a2' }}
  # Optional: N8N API key for authenticated requests  
  N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
  # Optional: Custom project identifier
  PROJECT_ID: ${{ secrets.PROJECT_ID || github.repository }}
  # Optional: Environment identifier
  ENVIRONMENT: ${{ secrets.ENVIRONMENT || 'production' }}

jobs:
  trigger-n8n:
    runs-on: ubuntu-latest
    name: Trigger N8N Workflow
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate configuration
        run: |
          echo "üîç Validating configuration..."
          
          if [ -z "${{ env.N8N_WEBHOOK_URL }}" ]; then
            echo "‚ùå ERROR: N8N_WEBHOOK_URL secret is not configured!"
            echo "Please add N8N_WEBHOOK_URL to your repository secrets."
            echo "Go to: Repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
            exit 1
          fi
          
          echo "‚úÖ N8N_WEBHOOK_URL is configured"
          echo "üìã Repository: ${{ github.repository }}"
          echo "üåç Environment: ${{ env.ENVIRONMENT }}"
          echo "üÜî Project ID: ${{ env.PROJECT_ID }}"
          echo "üîó Webhook URL configured: $(echo '${{ env.N8N_WEBHOOK_URL }}' | sed 's/\(.*\)\(.\{10\}\)$/\1**********/')"
        
      - name: Prepare payload data
        id: payload
        run: |
          # Create a comprehensive payload with GitHub context
          cat << EOF > payload.json
          {
            "github": {
              "event_name": "${{ github.event_name }}",
              "repository": {
                "name": "${{ github.event.repository.name }}",
                "owner": "${{ github.repository_owner }}",
                "full_name": "${{ github.repository }}",
                "html_url": "${{ github.event.repository.html_url }}",
                "clone_url": "${{ github.event.repository.clone_url }}",
                "description": "${{ github.event.repository.description }}",
                "language": "${{ github.event.repository.language }}",
                "topics": ${{ toJSON(github.event.repository.topics) }},
                "visibility": "${{ github.event.repository.visibility }}"
              },
              "ref": "${{ github.ref }}",
              "ref_name": "${{ github.ref_name }}",
              "ref_type": "${{ github.ref_type }}",
              "sha": "${{ github.sha }}",
              "actor": "${{ github.actor }}",
              "workflow": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}",
              "run_number": "${{ github.run_number }}",
              "run_attempt": "${{ github.run_attempt }}",
              "job": "${{ github.job }}"
            },
            "commit": {
              "sha": "${{ github.sha }}",
              "message": "${{ github.event.head_commit.message }}",
              "author": {
                "name": "${{ github.event.head_commit.author.name }}",
                "email": "${{ github.event.head_commit.author.email }}",
                "username": "${{ github.event.head_commit.author.username }}"
              },
              "committer": {
                "name": "${{ github.event.head_commit.committer.name }}",
                "email": "${{ github.event.head_commit.committer.email }}"
              },
              "url": "${{ github.event.head_commit.url }}",
              "tree_id": "${{ github.event.head_commit.tree_id }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            },
            "pull_request": {
              "number": "${{ github.event.pull_request.number }}",
              "title": "${{ github.event.pull_request.title }}",
              "body": "${{ github.event.pull_request.body }}",
              "state": "${{ github.event.pull_request.state }}",
              "merged": "${{ github.event.pull_request.merged }}",
              "draft": "${{ github.event.pull_request.draft }}",
              "locked": "${{ github.event.pull_request.locked }}",
              "user": {
                "login": "${{ github.event.pull_request.user.login }}",
                "type": "${{ github.event.pull_request.user.type }}"
              },
              "head": {
                "ref": "${{ github.event.pull_request.head.ref }}",
                "sha": "${{ github.event.pull_request.head.sha }}",
                "repo": {
                  "name": "${{ github.event.pull_request.head.repo.name }}",
                  "full_name": "${{ github.event.pull_request.head.repo.full_name }}"
                }
              },
              "base": {
                "ref": "${{ github.event.pull_request.base.ref }}",
                "sha": "${{ github.event.pull_request.base.sha }}",
                "repo": {
                  "name": "${{ github.event.pull_request.base.repo.name }}",
                  "full_name": "${{ github.event.pull_request.base.repo.full_name }}"
                }
              },
              "assignees": ${{ toJSON(github.event.pull_request.assignees) }},
              "requested_reviewers": ${{ toJSON(github.event.pull_request.requested_reviewers) }},
              "labels": ${{ toJSON(github.event.pull_request.labels) }}
            },
            "issue": {
              "number": "${{ github.event.issue.number }}",
              "title": "${{ github.event.issue.title }}",
              "body": "${{ github.event.issue.body }}",
              "state": "${{ github.event.issue.state }}",
              "locked": "${{ github.event.issue.locked }}",
              "user": {
                "login": "${{ github.event.issue.user.login }}",
                "type": "${{ github.event.issue.user.type }}"
              },
              "assignees": ${{ toJSON(github.event.issue.assignees) }},
              "labels": ${{ toJSON(github.event.issue.labels) }},
              "milestone": {
                "title": "${{ github.event.issue.milestone.title }}",
                "number": "${{ github.event.issue.milestone.number }}",
                "state": "${{ github.event.issue.milestone.state }}"
              },
              "created_at": "${{ github.event.issue.created_at }}",
              "updated_at": "${{ github.event.issue.updated_at }}"
            },
            "release": {
              "tag_name": "${{ github.event.release.tag_name }}",
              "name": "${{ github.event.release.name }}",
              "body": "${{ github.event.release.body }}",
              "draft": "${{ github.event.release.draft }}",
              "prerelease": "${{ github.event.release.prerelease }}",
              "created_at": "${{ github.event.release.created_at }}",
              "published_at": "${{ github.event.release.published_at }}",
              "author": {
                "login": "${{ github.event.release.author.login }}"
              },
              "assets": ${{ toJSON(github.event.release.assets) }}
            },
            "workflow_dispatch": {
              "inputs": {
                "environment": "${{ github.event.inputs.environment }}",
                "message": "${{ github.event.inputs.message }}"
              }
            },
            "environment": {
              "name": "${{ env.ENVIRONMENT }}",
              "project_id": "${{ env.PROJECT_ID }}",
              "runner_os": "${{ runner.os }}",
              "runner_arch": "${{ runner.arch }}"
            },
            "timestamps": {
              "workflow_started": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "payload_generated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
            },
            "metadata": {
              "workflow_file": "${{ github.workflow }}",
              "action_version": "1.0.0",
              "payload_schema_version": "2.0.0"
            }
          }
          EOF
          
          # Make payload available to next steps
          echo "payload_file=payload.json" >> $GITHUB_OUTPUT
          
          # Display payload for debugging (remove sensitive data if any)
          echo "Generated payload for repository: ${{ github.repository }}"
          echo "Event type: ${{ github.event_name }}"
          echo "Project ID: ${{ env.PROJECT_ID }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"

      - name: Trigger N8N Webhook (Basic)
        if: env.N8N_WEBHOOK_URL != '' && env.N8N_API_KEY == ''
        run: |
          echo "üöÄ Triggering N8N webhook (POST request)..."
          echo "üì° Repository: ${{ github.repository }}"
          echo "üéØ Event: ${{ github.event_name }}"
          echo "üîó Webhook URL: $(echo '${{ env.N8N_WEBHOOK_URL }}' | sed 's/\(.*\)\(.\{10\}\)$/\1**********/')"
          
          # POST request to n8n webhook (as configured in your node)
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "User-Agent: GitHub-Actions/${{ github.repository }}/${{ github.run_id }}" \
            -H "X-GitHub-Event: ${{ github.event_name }}" \
            -H "X-GitHub-Repository: ${{ github.repository }}" \
            -H "X-GitHub-SHA: ${{ github.sha }}" \
            -H "X-GitHub-Ref: ${{ github.ref }}" \
            -H "X-GitHub-Actor: ${{ github.actor }}" \
            -H "X-GitHub-Workflow: ${{ github.workflow }}" \
            -H "X-GitHub-Run-ID: ${{ github.run_id }}" \
            --data @payload.json \
            --max-time 30 \
            "${{ env.N8N_WEBHOOK_URL }}")
          
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "üìä HTTP Status Code: $http_code"
          echo "üìÑ Response Body: $response_body"
          
          # Check if request was successful (n8n typically returns 200)
          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            echo "‚úÖ N8N webhook triggered successfully!"
            echo "üéâ Workflow integration completed for ${{ github.repository }}"
            echo "üìã N8N should now be processing the webhook data"
          else
            echo "‚ùå N8N webhook failed with status code: $http_code"
            echo "üîç Response details: $response_body"
            echo "üí° Troubleshooting tips:"
            echo "   - Ensure your n8n workflow is active and running"
            echo "   - Verify the webhook node is properly configured for POST requests"
            echo "   - Check that the webhook URL path matches: 8bdbd1e3-f7bf-4bec-ae9d-9535ef6158a2"
            exit 1
          fi

      - name: Trigger N8N Webhook (Authenticated)
        if: env.N8N_WEBHOOK_URL != '' && env.N8N_API_KEY != ''
        run: |
          echo "üöÄ Triggering N8N webhook (authenticated POST request)..."
          echo "üì° Repository: ${{ github.repository }}"
          echo "üéØ Event: ${{ github.event_name }}"
          echo "üîê Using API key authentication"
          echo "üîó Webhook URL: $(echo '${{ env.N8N_WEBHOOK_URL }}' | sed 's/\(.*\)\(.\{10\}\)$/\1**********/')"
          
          # Authenticated POST request to n8n webhook
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ env.N8N_API_KEY }}" \
            -H "User-Agent: GitHub-Actions/${{ github.repository }}/${{ github.run_id }}" \
            -H "X-GitHub-Event: ${{ github.event_name }}" \
            -H "X-GitHub-Repository: ${{ github.repository }}" \
            -H "X-GitHub-SHA: ${{ github.sha }}" \
            -H "X-GitHub-Ref: ${{ github.ref }}" \
            -H "X-GitHub-Actor: ${{ github.actor }}" \
            -H "X-GitHub-Workflow: ${{ github.workflow }}" \
            -H "X-GitHub-Run-ID: ${{ github.run_id }}" \
            -H "X-Project-ID: ${{ env.PROJECT_ID }}" \
            -H "X-Environment: ${{ env.ENVIRONMENT }}" \
            --data @payload.json \
            --max-time 30 \
            "${{ env.N8N_WEBHOOK_URL }}")
          
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "üìä HTTP Status Code: $http_code"
          echo "üìÑ Response Body: $response_body"
          
          # Check if request was successful
          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            echo "‚úÖ N8N authenticated webhook triggered successfully!"
            echo "üéâ Workflow integration completed for ${{ github.repository }}"
            echo "üìã N8N should now be processing the webhook data"
            # Save response for potential use in later steps
            echo "$response_body" > n8n_response.json
          else
            echo "‚ùå N8N authenticated webhook failed with status code: $http_code"
            echo "üîç Response details: $response_body"
            echo "üí° Troubleshooting tips:"
            echo "   - Verify your N8N_API_KEY secret is correct"
            echo "   - Ensure your n8n workflow is active and running"
            echo "   - Check that the webhook node accepts authenticated requests"
            echo "   - Verify the webhook URL path matches: 8bdbd1e3-f7bf-4bec-ae9d-9535ef6158a2"
            exit 1
          fi

      - name: Handle N8N Response (Optional)
        if: env.N8N_WEBHOOK_URL != '' && env.N8N_API_KEY != ''
        run: |
          if [ -f "n8n_response.json" ]; then
            echo "Processing N8N response..."
            
            # Parse response and extract useful information
            execution_id=$(cat n8n_response.json | jq -r '.executionId // empty')
            workflow_id=$(cat n8n_response.json | jq -r '.workflowId // empty')
            
            if [ ! -z "$execution_id" ]; then
              echo "N8N Execution ID: $execution_id"
              echo "N8N Workflow ID: $workflow_id"
              
              # You can use these IDs to track the workflow execution
              # or trigger additional actions based on the response
            fi
          fi

      - name: Retry on Failure (Optional)
        if: failure() && env.N8N_WEBHOOK_URL != ''
        run: |
          echo "Attempting to retry N8N webhook trigger..."
          sleep 5
          
          # Retry with exponential backoff
          for i in {1..3}; do
            echo "Retry attempt $i/3"
            
            response=$(curl -s -w "%{http_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -H "User-Agent: GitHub-Actions/${{ github.run_id }}-retry-$i" \
              -d @payload.json \
              "${{ env.N8N_WEBHOOK_URL }}")
            
            http_code="${response: -3}"
            
            if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
              echo "‚úÖ N8N webhook retry successful on attempt $i"
              exit 0
            else
              echo "‚ùå Retry attempt $i failed with status code: $http_code"
              if [ $i -lt 3 ]; then
                sleep $((2 ** i))  # Exponential backoff
              fi
            fi
          done
          
          echo "‚ùå All retry attempts failed"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          # Clean up sensitive files
          rm -f payload.json n8n_response.json
          echo "Cleanup completed"
