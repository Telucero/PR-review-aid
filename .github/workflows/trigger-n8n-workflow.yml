name: Trigger n8n Webhook with Complete PR Info

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  gather-and-send:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Run UUID
        id: uuid
        run: echo "run_token=$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Fetch PR metadata
        id: pr
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR files (diffs/patches)
        id: files
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR commits
        id: commits
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR diff (patch)
        id: diff
        run: |
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3.diff" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
            > pr.diff
          DIFF_B64=$(base64 -w 0 pr.diff)
          echo "diff_b64=$DIFF_B64" >> $GITHUB_OUTPUT

      - name: Combine and send to n8n webhook and capture response
        id: n8n
        env:
          PR_DATA: ${{ steps.pr.outputs.data }}
          FILES_DATA: ${{ steps.files.outputs.data }}
          COMMITS_DATA: ${{ steps.commits.outputs.data }}
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
          RUN_TOKEN: ${{ steps.uuid.outputs.run_token }}
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        run: |
          set -e

          # Build payload.json using jq to avoid invalid JSON formatting
          jq -n \
            --argjson pr "$PR_DATA" \
            --argjson files "$FILES_DATA" \
            --argjson commits "$COMMITS_DATA" \
            --arg diff_base64 "$DIFF_B64" \
            --arg token "$RUN_TOKEN" \
            '{
              pr: $pr,
              files: $files,
              commits: $commits,
              diff_base64: $diff_base64,
              token: $token
            }' > payload.json

          # Post to n8n and capture response
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            --data @payload.json \
            "$N8N_WEBHOOK_URL")

          HTTP_BODY=$(echo "$RESPONSE" | sed '$d')
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "n8n responded with status: $HTTP_STATUS"
          echo "n8n response body: $HTTP_BODY"

          echo "$HTTP_BODY" > response_body.json

          STATUS=$(echo "$HTTP_BODY" | jq -r ".status" | tr -d '"')
          MATCHED=$(echo "$HTTP_BODY" | jq -r ".token" | tr -d '"')

          if [ "$MATCHED" != "$RUN_TOKEN" ] || [ "$STATUS" != "completed" ]; then
            echo "n8n workflow did not complete correctly or token mismatch"
            exit 1
          fi

          if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
            echo "n8n workflow failed or did not complete successfully"
            exit 1
          fi

      - name: Post n8n feedback to PR (if feedback was provided)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the response_body.json file
          RESPONSE_BODY=$(cat response_body.json)

          # Extract the 'comment' field, which is a JSON string (array of objects)
          COMMENT_JSON=$(echo "$RESPONSE_BODY" | jq -r '.[0].comment')

          # Decode COMMENT_JSON and concatenate all formattedReview entries with double newlines between them
          ALL_COMMENTS=$(echo "$COMMENT_JSON" | jq -r '[.[]?.formattedReview] | join("\n\n---\n\n")')

          # Extract PR number
          PR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r '.[0].pr_number')

          # Check if comment is not empty or null
          if [ -n "$ALL_COMMENTS" ] && [ "$ALL_COMMENTS" != "null" ]; then
            echo "Posting feedback to PR #$PR_NUMBER"

            # Install GitHub CLI if not available
            if ! command -v gh &> /dev/null; then
              echo "Installing GitHub CLI..."
              sudo apt-get update && sudo apt-get install -y gh
            fi

            # Authenticate GitHub CLI
            echo "$GH_TOKEN" | gh auth login --with-token

            # Post the concatenated comment to the PR
            gh pr comment "$PR_NUMBER" --body "$ALL_COMMENTS"
          else
            echo "No comment to post."
          fi

            

              